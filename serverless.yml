service: file-storage-api
frameworkVersion: '3'
package:
    individually: true
plugins:
    - serverless-bundle
provider:
    name: aws
    runtime: nodejs20.x
    stage: dev
    region: eu-central-1
    lambdaHashingVersion: 20201221
    environment:
        FILE_TABLE: ${self:service}-${sls:stage}-files
        FILE_BUCKET: ${self:service}-${sls:stage}-files
    httpApi:
        cors:
            allowedOrigins: '*'
            allowedHeaders:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
            allowedMethods:
                - OPTIONS
                - GET
                - POST
                - PUT
                - DELETE
            allowCredentials: false
    iam:
        role:
            statements:
                -   Effect: Allow
                    Action:
                        - dynamodb:GetItem
                        - dynamodb:PutItem
                        - dynamodb:Scan
                        - dynamodb:DeleteItem
                    Resource:
                    -   Fn::GetAtt: [ FileTable, Arn ]
                -   Effect: Allow
                    Action:
                        - s3:DeleteObject
                        - s3:GetObject
                        - s3:ListBucket
                        - s3:PutObject
                        - s3:GetBucketPolicy
                        - s3:GetBucketLocation
                        - s3:PutBucketPolicy
                    Resource:
                        -   Fn::Join: [ '/', [ Fn::GetAtt: [ FileBucket, Arn ], '*' ] ]
functions:
    -   file-create:
            handler: src/functions/file-create.handler
            events:
                -   httpApi:
                        path: /files
                        method: post
    -   file-list:
            handler: src/functions/file-list.handler
            events:
                -   httpApi:
                        path: /files
                        method: get
    -   file-delete:
            handler: src/functions/file-delete.handler
            events:
                -   httpApi:
                        path: /files/{id}
                        method: delete
resources:
    -   Resources:
            FileTable:
                Type: 'AWS::DynamoDB::Table'
                DeletionPolicy: Delete
                Properties:
                    AttributeDefinitions:
                        -   AttributeName: id
                            AttributeType: S
                    KeySchema:
                        -   AttributeName: id
                            KeyType: HASH
                    BillingMode: PAY_PER_REQUEST
                    TableName: ${self:provider.environment.FILE_TABLE}
            FileBucket:
                Type: 'AWS::S3::Bucket'
                DeletionPolicy: Delete
                Properties:
                    BucketName: ${self:provider.environment.FILE_BUCKET}
                    PublicAccessBlockConfiguration:
                        BlockPublicAcls: false
                        BlockPublicPolicy: false
                        IgnorePublicAcls: false
                        RestrictPublicBuckets: false
            BucketPolicy:
                Type: AWS::S3::BucketPolicy
                Properties:
                    Bucket:
                        Ref: FileBucket
                    PolicyDocument:
                        Statement:
                            -   Action:
                                    - 's3:ListBucket'
                                Effect: Allow
                                Principal: '*'
                                Resource:
                                    -   Fn::GetAtt: [ FileBucket, Arn ]
            FilePolicy:
                Type: AWS::S3::BucketPolicy
                Properties:
                    Bucket:
                        Ref: FileBucket
                    PolicyDocument:
                        Statement:
                            -   Action:
                                    - 's3:GetObject'
                                Effect: Allow
                                Principal: '*'
                                Resource:
                                    -   Fn::Join: [ '/', [ Fn::GetAtt: [ FileBucket, Arn ], '*' ] ]
